// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetFinancesResponse, CreateFinanceData, CreateFinanceResponse, GetFinanceData, GetFinanceResponse, UpdateFinanceData, UpdateFinanceResponse, DeleteFinanceData, DeleteFinanceResponse, UploadFinanceAttachmentsData, UploadFinanceAttachmentsResponse, DeleteFinanceAttachmentData, DeleteFinanceAttachmentResponse, GetSpendingLimitResponse, SetSpendingLimitData, SetSpendingLimitResponse, DeleteSpendingLimitResponse, UpdateGoalData, UpdateGoalResponse, GetGoalData, GetGoalResponse, DeleteGoalData, DeleteGoalResponse, ListGoalsResponse, CreateGoalData, CreateGoalResponse, AddGoalRecordData, AddGoalRecordResponse } from './types.gen';

export class Finances {
    /**
     * Get Finances
     * @returns FinanceSchema OK
     * @throws ApiError
     */
    public static getFinances(): CancelablePromise<GetFinancesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/finances'
        });
    }
    
    /**
     * Create Finance
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.goalId
     * @returns FinanceSchema OK
     * @throws ApiError
     */
    public static createFinance(data: CreateFinanceData): CancelablePromise<CreateFinanceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/finances',
            query: {
                goal_id: data.goalId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Get Finance
     * @param data The data for the request.
     * @param data.financeId
     * @returns DetailFinanceSchema OK
     * @throws ApiError
     */
    public static getFinance(data: GetFinanceData): CancelablePromise<GetFinanceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/finances/{finance_id}',
            path: {
                finance_id: data.financeId
            }
        });
    }
    
    /**
     * Update Finance
     * @param data The data for the request.
     * @param data.financeId
     * @param data.requestBody
     * @returns FinanceSchema OK
     * @throws ApiError
     */
    public static updateFinance(data: UpdateFinanceData): CancelablePromise<UpdateFinanceResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/finances/{finance_id}',
            path: {
                finance_id: data.financeId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Delete Finance
     * @param data The data for the request.
     * @param data.financeId
     * @returns void No Content
     * @throws ApiError
     */
    public static deleteFinance(data: DeleteFinanceData): CancelablePromise<DeleteFinanceResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/finances/{finance_id}',
            path: {
                finance_id: data.financeId
            }
        });
    }
    
    /**
     * Upload Finance Attachments
     * @param data The data for the request.
     * @param data.financeId
     * @param data.formData
     * @returns FinanceAttachmentSchema OK
     * @throws ApiError
     */
    public static uploadFinanceAttachments(data: UploadFinanceAttachmentsData): CancelablePromise<UploadFinanceAttachmentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/finances/{finance_id}/attachments',
            path: {
                finance_id: data.financeId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * Delete Finance Attachment
     * @param data The data for the request.
     * @param data.attachmentId
     * @returns void No Content
     * @throws ApiError
     */
    public static deleteFinanceAttachment(data: DeleteFinanceAttachmentData): CancelablePromise<DeleteFinanceAttachmentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/attachments/{attachment_id}',
            path: {
                attachment_id: data.attachmentId
            }
        });
    }
    
    /**
     * Get Spending Limit
     * @returns unknown OK
     * @throws ApiError
     */
    public static getSpendingLimit(): CancelablePromise<GetSpendingLimitResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/spending-limit'
        });
    }
    
    /**
     * Set Spending Limit
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SpendingLimitSchema OK
     * @throws ApiError
     */
    public static setSpendingLimit(data: SetSpendingLimitData): CancelablePromise<SetSpendingLimitResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/spending-limit',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Delete Spending Limit
     * @returns void No Content
     * @throws ApiError
     */
    public static deleteSpendingLimit(): CancelablePromise<DeleteSpendingLimitResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/spending-limit'
        });
    }
    
    /**
     * Update Goal
     * @param data The data for the request.
     * @param data.goalId
     * @param data.requestBody
     * @returns GoalSchema OK
     * @throws ApiError
     */
    public static updateGoal(data: UpdateGoalData): CancelablePromise<UpdateGoalResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/goals/{goal_id}',
            path: {
                goal_id: data.goalId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Get Goal
     * @param data The data for the request.
     * @param data.goalId
     * @returns GoalSchema OK
     * @throws ApiError
     */
    public static getGoal(data: GetGoalData): CancelablePromise<GetGoalResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/goals/{goal_id}',
            path: {
                goal_id: data.goalId
            }
        });
    }
    
    /**
     * Delete Goal
     * @param data The data for the request.
     * @param data.goalId
     * @returns void No Content
     * @throws ApiError
     */
    public static deleteGoal(data: DeleteGoalData): CancelablePromise<DeleteGoalResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/goals/{goal_id}',
            path: {
                goal_id: data.goalId
            }
        });
    }
    
    /**
     * List Goals
     * @returns GoalSchema OK
     * @throws ApiError
     */
    public static listGoals(): CancelablePromise<ListGoalsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/goals'
        });
    }
    
    /**
     * Create Goal
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GoalSchema OK
     * @throws ApiError
     */
    public static createGoal(data: CreateGoalData): CancelablePromise<CreateGoalResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/goals',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Add Goal Record
     * @param data The data for the request.
     * @param data.goalId
     * @param data.payload
     * @returns GoalSchema OK
     * @throws ApiError
     */
    public static addGoalRecord(data: AddGoalRecordData): CancelablePromise<AddGoalRecordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/goals/{goal_id}/records',
            path: {
                goal_id: data.goalId
            },
            query: {
                payload: data.payload
            }
        });
    }
}